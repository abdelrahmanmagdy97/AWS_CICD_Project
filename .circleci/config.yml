version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
        - checkout
        - run:
            name: destroy environment 
            command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
              aws s3 rm s3://udapeople-<<parameters.Workflow_ID>>
            when: on_fail

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/X1Q5tMTP2WjhRcih3TkunA/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi   

jobs:

  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test         
     
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: front-end test
          command: |
            cd backend
            npm install
            npm run test 


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
  
  notify_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: testing
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Success :) *",
                      "emoji": true
                    }
                  ]
                }
              ]
            }

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: yum install
          command: |
                yum install -y tar gzip
      - run:
          name: Ensure backend infra exists
          command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
            name: Ensure frontend infra exists
            command: |
                  aws cloudformation deploy \
                  --template-file .circleci/files/frontend.yml \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople
      - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output=text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - install_awscli
      - add_ssh_keys:
               # You can get this ID in the section where you registered the SSH Key
               fingerprints: ["d7:91:2c:7b:27:37:e3:43:ef:80:27:f5:bd:48:4d:e9"] 
      - run:
           name: Install dependencies
           command: |
                 sudo apt install ansible -y
      - run:
           name: Configure server
           command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
      
  run-migrations:
      docker: 
          - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
      steps:
        - checkout
        - install_awscli
        - run:
            name: Run migrations
      # opened inbound for database to be able to run migration
            command: |

              cd backend
              npm install
              npm run migrations > migrations_dump.txt
      # Run and save the migration output
        - run:
           name: Send migration results to memstash
           command: |
            cd backend
            ls
            cat migrations_dump.txt
            if grep -q "No migrations are pending" migrations_dump.txt
            then
              curl --insecure https://kvdb.io/X1Q5tMTP2WjhRcih3TkunA/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d "1"
            fi
      # Here's where you will add some code to rollback on failure  
        - destroy-environment
        - revert-migrations   
  deploy-frontend:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - install_awscli
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Install dependencies
            command: |
             sudo apt install ansible -y
             sudo apt install nodejs -y
             sudo apt install python3.8 -y
             sudo apt install npm -y
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances...............)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure    
        - destroy-environment
        - revert-migrations
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d7:91:2c:7b:27:37:e3:43:ef:80:27:f5:bd:48:4d:e9"] 
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
             sudo apt install ansible -y
             sudo apt install nodejs -y
             sudo apt install python3.8 -y
             sudo apt install npm -y
             sudo apt install gzip -y
      - run:
          name: Package Backend
          command: |
             # Generate production build of the backend
              cd backend
              npm i
              npm run build
              cd ..
              # Archive the contents of the dist folder, along with backned package information
              cd backend
              tar -czf artifact.tar.gz dist/* package*
              cd ..
              # Copy the files to the deploy role files folder to prepare for deploying it via ansible
              cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

    
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - test-frontend
      - scan-backend:
          requires:
            - test-backend
      - notify_success:
         context: Abdelrahman
         requires: [deploy-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
          